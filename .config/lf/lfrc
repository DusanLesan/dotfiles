# interpreter for shell commands (needs to be POSIX compatible)

set scrolloff 10
set hidden true
set previewer ~/.config/lf/scope
set ifs "\n"
set autoquit true

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type "$f" -b) in
        image/*) echo "$fx" | devour sxiv -aiop 2>/dev/null | \
            (lf -remote "send $id unselect"; \
            while read -r file; do \
                lf -remote "send $id select \"$file\""; \
                lf -remote "send toggle"; \
            done) ;;
				text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd yank-path ${{
    echo "$fx" | xclip -i -selection clipboard
}}

cmd yank-image ${{
	[ $(mimetype -Mb "$f") = "image/png" ] && \
	xclip -sel c -t "image/png" "$f" || \
	convert "$f" png:- | xclip -select  clipboard -t "image/png"
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    echo "DELETE $file" 
    echo "END"
  done

  lf -remote 'send reload'
}}
#chmod $ans $file

# define a custom 'delete' command
cmd delete ${{
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    if [ $ans = "y" ]; then
        for x in $fx; do
            rm -rf "$x"
        done
    fi
}}

cmd draganddrop &dragon-drag-and-drop -a -x $fx

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    temp=$f.tmp
    mkdir $temp
    cp -r $fx $temp
    tar czf $f.tar.gz $temp
    rm -rf $temp
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    temp=$f.tmp
    mkdir $temp
    cp -r $fx $temp
    cd $temp
    zip -r $f.zip .
    rm -rf $temp
}}

cmd fzf_jump ${{
   res="$(find . -maxdepth 1 | fzf --reverse)"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""
}}

# Remove some defaults
map m
map o
map c
map d

# Basic Functions
map H top
map L bottom
map <a-f> :fzf_jump
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map Y yank-path
map <a-y> yank-image
map mf mkfile
map md mkdir
map ch chmod
map r rename
map dr draganddrop

map ae $ext $f
map at tar
map az zip

map R reload
map C clear
map U unselect
map spd set nopreview
map spe set preview
map sr1 set ratios 1
map sr2 set ratios 1:2
map sr3 set ratios 1:2:3
map sr4 set ratios 1:2:3:5

# use enter for shell commands
map <enter> shell

# dedicated keys for file opener actions
map o &mimeopen $f 2> /dev/null
map O $mimeopen --ask $f 2> /dev/null
map <a-o> $sh $f &

# Movement
map gds cd ~/Documents
map gdl cd ~/Downloads
map gl cd ~/.local
map gG cd  ~/git
map gpr cd ~/git/5.0_roku/pluto-tv-roku/
map gpc cd ~/git/5.0_roku/pluto-tv-roku/pluto/components/5.0_app/
map gh1 cd ~/hdd_1/
map gmtp cd /run/user/1000/gvfs
