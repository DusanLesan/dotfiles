#!/bin/env python

from subprocess import Popen, PIPE
from threading import Thread
import re

def getOutput(params, input = ""):
	p = Popen(params, stdout=PIPE, stdin=PIPE, stderr=None)
	out = p.communicate(input=input.encode())[0].decode("utf-8").strip()
	if p.returncode != 0:
		quit()
	return out

def setList(list, action):
	globals()[list] = getOutput(['gh', action])

def setBase():
	global base
	recent = getOutput(['git', 'branch', '--sort=-committerdate'])
	recent = re.sub("[* ]", "", recent, flags=re.M)
	base = getOutput(['fzf', '--bind=ctrl-space:print-query', '--prompt', 'Base branch: '], recent)

def setTitleAndDescription():
	global title
	global body
	codes = ""
	for i in ticketnumbers:
		codes += "["+code+"-"+i+"]"
		if body:
			body += "\n"
		body += "["+code+"-"+i+"]("+url+code+"-"+i+")"
	title = codes + " " + ticketName

def setLabels():
	global labelList
	global labels
	label = getOutput(['fzf', '--prompt', 'Label: '], labelList)
	if label:
		labelList = re.sub("^"+label+"*\n", "", labelList, flags=re.M)
		if labels:
			labels += "," + label
		else:
			labels = label
		setLabels()

def setMilestone():
	global milestone
	milestone = getOutput(['fzf', '--prompt', 'Milestone: '], milestoneList)

def setReviewers():
	global reviewers
	f = open(userListsPath + "team_dev", "r")
	reviewers = f.read()
	if not devonly in labels:
		if dte in labels:
			f = open(userListsPath + "team_dte", "r")
		else:
			f = open(userListsPath + "team_ste", "r")
		reviewers += f.read()

	reviewers = reviewers.strip()
	reviewers = reviewers.replace("\n", ",")

def setTitle():
	global title
	title = getOutput(['fzf', '--header', 'To confirm custom value press ctrl + space', '--bind=ctrl-space:print-query', '--prompt', 'PR title: '], title)


def verify():
	header = "Title:\n" + title + "\n\nBase:\n" + base + "\n\nBranch:\n" + branch + "\n\nReviewers:\n" + reviewers + "\n\nDescription:\n" + body + "\n\nLabels:\n" + labels + "\n\nMilestone:\n" + milestone
	confirmed = getOutput(['fzf', '--header', header, "--prompt", "Create PR? "], "yes\nno")
	if confirmed != "yes":
		quit()

assignee = "DusanLesan"
userListsPath = "/home/dusan/.local/share/"
url = "https:\\/\\/plutotv.atlassian.net\\/browse\\/"
code = "ROKU"
devonly = "dev-approval-only"
dte = "phoenix"

t1 = Thread(target=setList, args=("labelList", "listLabels"))
t2 = Thread(target=setList, args=("milestoneList", "listMilestones"))
t1.start()
t2.start()

branch = getOutput(['git', 'branch', '--show-current'])
ticketnumbers = re.findall(r"(?<=" + code + "-)\\d+", branch)
ticketName = re.findall(r"([^\/]+$)", branch)[0]
ticketName = ticketName.replace("-", " ").replace("_", " ")
ticketName = ticketName[0].upper() + ticketName[1:]
title = base = reviewers = labels = milestone = body = ""
labelList = milestoneList = ""

setBase()
setTitleAndDescription()
setTitle()

t1.join()
labelList = "\n" + labelList
setLabels()

t2.join()
milestoneList = "\n" + milestoneList
setMilestone()

setReviewers()
verify()

status = getOutput(['gh', 'pr', 'create', '-t', title, '-B', base, '-H', branch, '-a', assignee, '-r', reviewers, '-b', body, '-l', labels, '-m', milestone])
print(status)
