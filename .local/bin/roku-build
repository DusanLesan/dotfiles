#!/usr/bin/env python3

import subprocess
from re import search
from glob import glob
from hashlib import md5
from pathlib import Path
from json import loads, load
from argparse import ArgumentParser
from socket import create_connection
from requests import Session, Request
from os import path, environ, urandom
from zipfile import ZipFile, ZIP_DEFLATED
from requests.auth import parse_dict_header

LAUNCH_JSON = ".vscode/launch.json"
DEFAULT_USER = "rokudev"
PLUGIN_INSTALL_URI = "/plugin_install"
PLUGIN_INSTALL_URL_FMT = "http://{ip}" + PLUGIN_INSTALL_URI
RALE_ENTRY_POINT = "' vscode_rale_tracker_entry"
RALE_TASK_INIT = 'if true = CreateObject("roAppInfo").IsDev() then m.vscode_rdb_odc_node = createObject("roSGNode", "TrackerTask")'
CODE_SETTINGS = ".config/code-oss/user-data/User/settings.json"

def notify(title, message):
	try:
		subprocess.run(["notify-send", title, message])
	except FileNotFoundError:
		print(f"{title}: {message}")

def die(msg):
	notify("Roku Build", msg)
	raise SystemExit(1)

def prompt(msg):
	try:
		return input(msg)
	except KeyboardInterrupt:
		die("Cancelled.")

def dmenu_prompt(options, prompt="Select:"):
	input_data = "\n".join(options)
	try:
		selection = subprocess.run(
			["dmenu", "-p", prompt],
			input=input_data.encode(),
			stdout=subprocess.PIPE,
			stderr=subprocess.DEVNULL
		)
		return selection.stdout.decode().strip() or None
	except Exception:
		return None

def get_git_root():
	try:
		return subprocess.check_output(["git", "rev-parse", "--show-toplevel"], text=True).strip()
	except subprocess.CalledProcessError:
		die("Not a git repository.")

def parse_result(html):
	result = {"state": None, "info": "unknown"}
	match = search(r'"messages"\s*:\s*(\[.*?\])', html)
	if not match:
		return result
	try:
		messages = loads(match.group(1).replace("'", '"'))
		for msg in messages:
			if isinstance(msg, dict) and "type" in msg and "text" in msg:
				notify("Roku Build", msg["text"])
				result["info"] = msg["text"]
				if msg["type"] == "error":
					result["state"] = "error"
				elif msg["type"] == "success" and not result["state"]:
					result["state"] = "success"
	except Exception as e:
		notify("Roku Build", f"Error parsing messages: {e}")
	return result

def get_digest_response(h, user, pw, method, uri, cnonce):
	ha1 = md5(f"{user}:{user}:{pw}".encode()).hexdigest()
	ha2 = md5(f"{method}:{uri}".encode()).hexdigest()
	return md5(f"{ha1}:{h['nonce']}:1:{cnonce}:auth:{ha2}".encode()).hexdigest()

def request_with_digest(method, user, pw, url, uri, data, file=None):
	session = Session()
	r = session.post(url, auth=(user, pw))
	if "WWW-Authenticate" not in r.headers:
		die("No digest challenge.")

	h = parse_dict_header(r.headers["WWW-Authenticate"])
	cnonce = urandom(8).hex()
	response = get_digest_response(h, user, pw, method, uri, cnonce)

	auth = (
		f'Digest username="{user}", realm="{user}", nonce="{h["nonce"]}", '
		f'uri="{uri}", algorithm=MD5, qop=auth, nc=1, '
		f'cnonce="{cnonce}", response="{response}"'
	)

	req = Request(method, url, data=data, files=file)
	prepped = session.prepare_request(req)
	prepped.headers["Authorization"] = auth
	return session.send(prepped, timeout=30)

def deploy(ip, zip_path, user, pw):
	url = PLUGIN_INSTALL_URL_FMT.format(ip=ip)
	with open(zip_path, "rb") as f:
		files = {'archive': ("build.zip", f, "application/zip")}
		data = {'mysubmit': 'Install', 'passwd': ''}
		r = request_with_digest("POST", user, pw, url, PLUGIN_INSTALL_URI, data, files)
	if r.status_code != 200:
		notify("Roku Build", f"Failed to deploy: {r.status_code}")
	res = parse_result(r.text)
	if res["state"] == "error":
		notify("Roku Build", f"Deploy failed: {res['info']}")
		return "failed"
	return "success"

def set_ip(host, port=80, timeout=1):
	try:
		create_connection((host, port), timeout=timeout).close()
		return host
	except Exception:
		try:
			return set_ip(input(f"Device {host} unreachable. Enter IP or hostname: "), port, timeout)
		except KeyboardInterrupt:
			die("Cancelled.")

def strip_json_comments(text):
	lines = text.splitlines()
	return "\n".join(line for line in lines if not line.strip().startswith("//"))

def load_json(path):
	if not path.exists():
		die(f"File not found: {path}")

	return loads(strip_json_comments(path.read_text()))

def parse_launch_json(root):
	launch = load_json(root / LAUNCH_JSON)
	conf = launch.get("configurations", [{}])[0]
	if conf.get("type") != "brightscript":
		die("Not a Roku project.")

	base = conf.get("rootDir", "").replace("${workspaceFolder}", str(root)) or str(root)
	rale = conf.get("raleTrackerTaskFileLocation", "").replace("${workspaceFolder}", str(root)) or ""
	files = conf.get("files")

	if not files:
		die("No files specified.")
	return base, files, rale

def parseTasks(root):
	tasks = load_json(root / ".vscode" / "tasks.json")
	inputs = tasks.get("inputs", [])

	for item in inputs:
		if item.get("id") == "stageName":
			options = item.get("options", [])
			return options

	die("No 'stageName' input with options found.")

def inject_tracker_task(files, root_dir, rale):
	if not rale:
		settings_path = Path.home() / CODE_SETTINGS
		if not settings_path.exists():
			die(f"settings.json not found at {settings_path}")
		with open(settings_path) as f:
			settings = load(f)
		rale = settings.get("brightscript.debug.raleTrackerTaskFileLocation")
		if not rale:
			die("RALE tracker task path not found in settings.json")

	files.append(f"{rale}=>components/TrackerTask.xml")
	find_and_replace_in_main(files, root_dir, RALE_ENTRY_POINT, RALE_TASK_INIT)

def find_and_replace_in_main(files, root_dir, old_str, new_str, search_path="source"):
	for file_path in files:
		if search_path in file_path:
			expanded = glob(path.join(root_dir, file_path.replace("${workspaceFolder}", root_dir)), recursive=True)
			for real_path in expanded:
				if not any(real_path.endswith(name) for name in ["main.brs", "index.brs", "Main.brs"]):
					continue
				if path.isfile(real_path):
					if replace_one_occurrence_in_file(real_path, old_str, new_str):
						return
	notify("Roku Build", f"RALE entry point not found inside '{search_path}' directory.")

def replace_one_occurrence_in_file(filepath, old_str, new_str):
	with open(filepath, 'rb+') as f:
		content = f.read()
		old_bytes = old_str.encode('utf-8')
		new_bytes = new_str.encode('utf-8')
		index = content.find(old_bytes)
		if index == -1:
			return False

		new_content = content[:index] + new_bytes + content[index + len(old_bytes):]
		f.seek(0)
		f.write(new_content)
		f.truncate()
		return True

def create_archive(root, base, file_patterns):
	valid = []
	for file_path in file_patterns:
		if "=>" in file_path:
			src_path, arc_path = file_path.split("=>", 1)
			src = Path(src_path.strip())
			if src.is_file():
				valid.append((src, Path(arc_path.strip())))
			continue

		pattern = file_path.replace("${workspaceFolder}", str(root))
		matches = glob(f"{base}/{pattern}", recursive=True) if "*" in pattern else [f"{base}/{pattern}"]
		valid += [f for f in matches if Path(f).is_file()]

	if not valid:
		notify("Roku Build", "No valid files found.")
		raise SystemExit(0)

	out = root / "out"
	out.mkdir(exist_ok=True)

	archive = out / "roku_build.zip"
	seen = set()
	with ZipFile(archive, 'w', ZIP_DEFLATED) as zf:
		for item in valid:
			if isinstance(item, tuple):
				src, arcname = item
			else:
				src = item
				arcname = Path(src).relative_to(base)
			if arcname in seen:
				continue
			seen.add(arcname)
			zf.write(src, arcname=arcname)
	return archive

def read_arguments():
	parser = ArgumentParser()
	parser.add_argument("-username", "-u", default=DEFAULT_USER, help="Roku Dev username.")
	parser.add_argument("-password", "-p", default=environ.get("roku_pass"), help="Roku Dev password.")
	parser.add_argument("-ip", "-i", default=environ.get("roku_device"), help="Target Roku device's IP address.")
	parser.add_argument("-rale", "-r", action="store_true", help="Inject RALE tracker task.")
	args, _ = parser.parse_known_args()
	return args

def launch_generic(args, root):
	ip = set_ip(args.ip)
	password = args.password or prompt("Enter device password: ")
	base, file_patterns, rale = parse_launch_json(root)

	if args.rale:
		inject_tracker_task(file_patterns, base, rale)

	archive = create_archive(root, base, file_patterns)
	deploy(ip, archive, args.username, password)

	if args.rale:
		find_and_replace_in_main(file_patterns, base, RALE_TASK_INIT, RALE_ENTRY_POINT)

def main():
	args = read_arguments()
	root = Path(get_git_root())
	if not (root / ".rokujs").exists():
		launch_generic(args, root)
	else:
		options = parseTasks(root)
		choice = dmenu_prompt(options, prompt="Choose an option")
		subprocess.run(["rokujs", "-ls", choice])

if __name__ == "__main__":
	main()
