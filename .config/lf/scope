#!/bin/bash

set -C -f -u
#IFS=$'\n'
#IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}"

# ANSI color codes are supported.
# STDIN is disabled, so interactive scripts won't work properly

# This script is considered a configuration file and must be updated manually.

# Meanings of exit codes:
# code | meaning    | action of ranger
# -----+------------+-------------------------------------------
# 0    | success    | Display stdout as preview
# 1    | no preview | Display no preview at all
# 2    | plain text | Display the plain content of the file

# Script arguments
FILE_PATH="${1}"         # Full path of the highlighted file
HEIGHT="${2}"
let WIDTH=$(tput cols)/2

#FILE_EXTENSION="${FILE_PATH##*.}"
#FILE_EXTENSION_LOWER=$(echo ${FILE_EXTENSION} | tr '[:upper:]' '[:lower:]')

# Settings
HIGHLIGHT_SIZE_MAX=262143  # 256KiB
HIGHLIGHT_TABWIDTH=8
HIGHLIGHT_STYLE='pablo'

handle_mime() {
    local mimetype="${1}"
    case "${mimetype}" in
        text/* | */xml | */json)
            if [ "$( stat --printf='%s' -- "${FILE_PATH}" )" -gt "${HIGHLIGHT_SIZE_MAX}" ]; then
                exit 2
            fi
            if [ "$( tput colors )" -ge 256 ]; then
                local highlight_format='xterm256'
            else
                local highlight_format='ansi'
            fi
            highlight --replace-tabs="${HIGHLIGHT_TABWIDTH}" --out-format="${highlight_format}" \
                --style="${HIGHLIGHT_STYLE}" --force -- "${FILE_PATH}" ;;
                
        application/zip) atool --list -- "${FILE_PATH}" ;;
        image/*)
            arr=($(file ${FILE_PATH} | awk 'split(substr($0, match($0, /[0-9]{2,6}x[0-9]+/),RLENGTH), arr, "x") {print arr[1], arr[2]}'))
            if [ ${#arr[@]} -eq 0 ] || [ ${arr[0]} -gt ${arr[1]} ]; then
                img2txt -W $WIDTH "${FILE_PATH}"
            else
                img2txt -H $HEIGHT "${FILE_PATH}"
            fi ;;
    esac
}

MIMETYPE="$( file --dereference --brief --mime-type -- "${FILE_PATH}" )"
handle_mime "${MIMETYPE}"
exit 1
